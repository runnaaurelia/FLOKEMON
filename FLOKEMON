-- Create Database and Table

CREATE DATABASE Flokemon
USE Flokemon

CREATE TABLE Staff(
    StaffID CHAR(5) PRIMARY KEY CHECK(StaffID LIKE 'ST[0-9][0-9][0-9]') NOT NULL,
    StaffName VARCHAR(255) CHECK(LEN(StaffName) > 7),
    StaffEmail VARCHAR(255) CHECK(StaffEmail LIKE '%.com'),
    StaffPhoneNumber VARCHAR(255),
    StaffGender VARCHAR(255) CHECK(StaffGender LIKE 'Male' OR StaffGender LIKE 'Female'),
    StaffSalary INT
)

CREATE TABLE Customer(
    CustomerID CHAR(5) PRIMARY KEY CHECK(CustomerID LIKE 'CU[0-9][0-9][0-9]') NOT NULL,
    CustomerName VARCHAR(255) CHECK(LEN(CustomerName) > 7),
    CustomerPhoneNumber VARCHAR(255),
    CustomerGender VARCHAR(255) CHECK (CustomerGender LIKE 'Male' OR CustomerGender LIKE 'Female'),
    CustomerEmail VARCHAR(255) CHECK(CustomerEmail LIKE '%.com'),
)

CREATE TABLE Supplier(
    SupplierID CHAR(5) PRIMARY KEY CHECK(SupplierID LIKE 'SU[0-9][0-9][0-9]') NOT NULL,
    SupplierName VARCHAR(255) CHECK(LEN(SupplierName) > 7),
    SupplierEmail VARCHAR(255) CHECK(SupplierEmail LIKE '%.com'),
    SupplierPhoneNumber VARCHAR(255)
)

CREATE TABLE FlokemonType(
    FlokemonTypeID CHAR(5) PRIMARY KEY CHECK(FlokemonTypeID LIKE 'FT[0-9][0-9][0-9]') NOT NULL,
    FlokemonTypeName VARCHAR(255)
)

CREATE TABLE Flokemon(
    FlokemonID CHAR(5) PRIMARY KEY CHECK(FlokemonID LIKE 'FL[0-9][0-9][0-9]') NOT NULL,
    FlokemonTypeID CHAR(5) FOREIGN KEY REFERENCES FlokemonType(FlokemonTypeID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    FlokemonName VARCHAR(255) CHECK(LEN(FlokemonName) > 5),
    FlokemonDamage INT CHECK(FlokemonDamage >= 100),
    FlokemonPrice INT CHECK(FlokemonPrice BETWEEN 10000 AND 1000000)
)

CREATE TABLE PurchaseTransaction(
    PurchaseTransactionID CHAR(5) PRIMARY KEY CHECK(PurchaseTransactionID LIKE 'PU[0-9][0-9][0-9]') NOT NULL,
    SupplierID CHAR(5) FOREIGN KEY REFERENCES Supplier(SupplierID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    StaffID CHAR(5) FOREIGN KEY REFERENCES Staff(StaffID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    PurchaseTransactionDate DATE CHECK(GETDATE() >= PurchaseTransactionDate),
)

CREATE TABLE PurchaseTransactionDetail(
    PurchaseTransactionID CHAR(5) FOREIGN KEY REFERENCES PurchaseTransaction(PurchaseTransactionID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    FlokemonID CHAR(5) FOREIGN KEY REFERENCES Flokemon(FlokemonID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    PurchaseQuantity INT CHECK(PurchaseQuantity >= 1),
)

CREATE TABLE SalesTransaction(
    SalesTransactionID CHAR(5) PRIMARY KEY CHECK(SalesTransactionID LIKE 'SA[0-9][0-9][0-9]') NOT NULL,
    StaffID CHAR(5) FOREIGN KEY REFERENCES Staff(StaffID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    CustomerID CHAR(5) FOREIGN KEY REFERENCES Customer(CustomerID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    SalesTransactionDate DATE CHECK(GETDATE() >= SalesTransactionDate)
)

CREATE TABLE SalesTransactionDetail(
    SalesTransactionID CHAR(5) FOREIGN KEY REFERENCES SalesTransaction(SalesTransactionID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    FlokemonID CHAR(5) FOREIGN KEY REFERENCES Flokemon(FlokemonID) ON UPDATE CASCADE ON DELETE CASCADE NOT NULL,
    SalesQuantity INT CHECK(SalesQuantity >= 1),
)

-- Insert Data

INSERT INTO Staff VALUES
('ST001', 'Julian Wijaya', 'julianwjy@jwlbx.com', '081386961893', 'Male', '5000000'),
('ST002', 'Wendy Lim', 'wendylim@yslim.com', '081389963093', 'Female', '4800000'),
('ST003', 'Vincent Susanto', 'vincentsusanto@yvfs.com', '08828853477893', 'Male', '4500000'),
('ST004', 'Danny Shelby', 'danshelby@shbly.com', '081254551194', 'Male', '5200000'),
('ST005', 'Gabriela Scarf', 'gabscarf@scrf.com', '085316601908', 'Female', '5000000'),
('ST006', 'Xavier Drewson', 'xavierdrewson@tsfl.com', '081356861893', 'Male', '5400000'),
('ST007', 'Jean Grey', 'jeangrey@gmhtl.com', '085689968878', 'Female', '4500000'),
('ST008', 'Alex Summers', 'alexsummers@msfd.com', '081388996876', 'Male', '5000000'),
('ST009', 'Aaron Lensheer', 'aaromlensheer@ghfv.com', '083377658223', 'Male', '4800000'),
('ST010', 'Jonathan Franz', 'jonathanfranz@ghkfl.com', '081384967857', 'Male', '5500000')

INSERT INTO Customer VALUES 
('CU001', 'Budi Santoso', '081324546776', 'Male',  'Budi27@gmail.com'),
('CU002', 'Kirana Cantika', '083457868990', 'Female', 'Kirana@gmail.com'),
('CU003', 'Putri Salmawati', '082345445678', 'Female', 'Putrisalma@gmail.com'),
('CU004', 'Yogi Syahputra', '081310656038', 'Male', 'Yogi@gmail.com'),
('CU005', 'Malika Cika', '089290312445', 'Female', 'Malikacika@gmail.com'),
('CU006', 'Zalfa Rabbani', '081217298789', 'Male', 'Zalperabb@gmail.com'),
('CU007', 'Dila Latifah', '081327616734', 'Female', 'Dilalatifah@gmail.com'),
('CU008', 'Monica Sriyani', '081213347867', 'Female', 'Monicasriyani@gmail.com'),
('CU009', 'Malik Firmansyah', '081218029004', 'Male', 'Firmansyah@gmail.com'),
('CU010', 'Kemas Ramadhan', '081317276167', 'Male', 'Kemas122@gmail.com')

INSERT INTO Supplier VALUES
('SU001', 'Toni Soraya', 'tonisoraya@gmail.com', '087654432123'),
('SU002', 'Irfan Salahudin', 'irfanscbd@gmail.com', '089987765432'),
('SU003', 'Wulan Pratiwi', 'wulanpratiwi@gmail.com', '085543321234'),
('SU004', 'Fitria Elma Lestari', 'fitria123@gmail.com', '082398765423'),
('SU005', 'Galak Prasasta Wiranto', 'akugalak@gmail.com', '081223344556'),
('SU006', 'Leo Winarno', 'leowinarno@gmail.com', '086623356798'),
('SU007', 'Makara Prasetya', 'makarapras@gmail.com', '086675543212'),
('SU008', 'Cintya Safitri Melani', 'cintasaf@gmail.com', '08988776654'),
('SU009', 'Zahra Susanti', 'zahrasusan@gmail.com', '086543298712'),
('SU010', 'Yessi Melani', 'yesmelani@gmail.com', '088967734512')

INSERT INTO FlokemonType VALUES
('FT001', 'Psychic'),
('FT002', 'Normal'),
('FT003', 'Fairy'),
('FT004', 'Water'),
('FT005', 'Ice'),
('FT006', 'Fire'),
('FT007', 'Grass'),
('FT008', 'Rock'),
('FT009', 'Electric'),
('FT010', 'Poison')

INSERT INTO Flokemon VALUES
('FL001', 'FT010', 'Butterfree', 1250, 70000),
('FL002', 'FT002', 'Eeveer', 110, 40000),
('FL003', 'FT006', 'Flareon', 400, 85000),
('FL004', 'FT004', 'Gyarados', 643, 250000),
('FL005', 'FT009', 'Pikachu', 750, 280000),
('FL006', 'FT001', 'Lugiar', 1326, 264000),
('FL007', 'FT005', 'Mamoswine', 850, 340000),
('FL008', 'FT001', 'Gardevoir', 1035, 295000),
('FL009', 'FT008', 'Archeops', 570, 190000),
('FL010', 'FT007', 'Bulbasaur', 670, 257000)

INSERT INTO PurchaseTransaction VALUES
('PU001', 'SU001', 'ST002', '2018-03-07'),
('PU002', 'SU004', 'ST008', '2017-02-11'),
('PU003', 'SU006', 'ST009', '2017-08-23'),
('PU004', 'SU003', 'ST007', '2018-02-08'),
('PU005', 'SU005', 'ST003', '2018-10-26'),
('PU006', 'SU008', 'ST006', '2017-06-09'),
('PU007', 'SU001', 'ST005', '2020-11-15'),
('PU008', 'SU009', 'ST002', '2018-01-30'),
('PU009', 'SU002', 'ST003', '2017-06-02'),
('PU010', 'SU007', 'ST009', '2018-03-17'),
('PU011', 'SU010', 'ST001', '2018-04-24'),
('PU012', 'SU004', 'ST010', '2018-01-19'),
('PU013', 'SU009', 'ST004', '2018-05-12'),
('PU014', 'SU001', 'ST007', '2020-05-04'),
('PU015', 'SU008', 'ST003', '2020-03-28')

INSERT INTO PurchaseTransactionDetail VALUES
('PU001', 'FL003', 6),
('PU001', 'FL008', 4),
('PU002', 'FL002', 3),
('PU002', 'FL005', 7),
('PU003', 'FL008', 2),
('PU003', 'FL003', 3),
('PU004', 'FL009', 7),
('PU004', 'FL006', 6),
('PU005', 'FL003', 2),
('PU005', 'FL007', 10),
('PU006', 'FL008', 9),
('PU006', 'FL004', 7),
('PU007', 'FL004', 2),
('PU007', 'FL009', 5),
('PU008', 'FL010', 3),
('PU008', 'FL002', 2),
('PU009', 'FL001', 4),
('PU009', 'FL005', 8),
('PU010', 'FL001', 7),
('PU010', 'FL008', 5),
('PU011', 'FL003', 6),
('PU011', 'FL006', 4),
('PU012', 'FL010', 3),
('PU012', 'FL008', 7),
('PU013', 'FL007', 6),
('PU013', 'FL009', 3),
('PU014', 'FL004', 9),
('PU014', 'FL003', 11),
('PU015', 'FL006', 2),
('PU015', 'FL007', 7)

INSERT INTO SalesTransaction VALUES
('SA001', 'ST002', 'CU009', '2018-04-19'),
('SA002', 'ST005', 'CU001', '2020-12-24'),
('SA003', 'ST004', 'CU008', '2020-10-09'),
('SA004', 'ST001', 'CU005', '2020-03-18'),
('SA005', 'ST002', 'CU001', '2020-11-03'),
('SA006', 'ST009', 'CU003', '2018-09-11'),
('SA007', 'ST010', 'CU003', '2018-07-08'),
('SA008', 'ST001', 'CU010', '2019-02-03'),
('SA009', 'ST002', 'CU009', '2018-11-27'),
('SA010', 'ST003', 'CU002', '2020-12-06'),
('SA011', 'ST004', 'CU007', '2020-07-16'),
('SA012', 'ST006', 'CU004', '2020-01-12'),
('SA013', 'ST005', 'CU006', '2019-04-08'),
('SA014', 'ST010', 'CU007', '2020-01-30'),
('SA015', 'ST007', 'CU002', '2018-04-15')

INSERT INTO SalesTransactionDetail VALUES
('SA001', 'FL002', 12),
('SA001', 'FL005', 3),
('SA002', 'FL003', 8),
('SA002', 'FL009', 4),
('SA003', 'FL002', 10),
('SA003', 'FL010', 2),
('SA004', 'FL009', 5),
('SA004', 'FL006', 4),
('SA005', 'FL008', 3),
('SA005', 'FL010', 3),
('SA006', 'FL005', 6),
('SA006', 'FL007', 2),
('SA007', 'FL001', 10),
('SA007', 'FL004', 5),
('SA008', 'FL006', 3),
('SA008', 'FL001', 14),
('SA009', 'FL008', 2),
('SA009', 'FL010', 5),
('SA010', 'FL007', 6),
('SA010', 'FL003', 7),
('SA011', 'FL009', 9),
('SA011', 'FL002', 8),
('SA012', 'FL004', 4),
('SA012', 'FL006', 3),
('SA013', 'FL008', 5),
('SA013', 'FL005', 6),
('SA014', 'FL001', 11),
('SA014', 'FL007', 2),
('SA015', 'FL010', 3),
('SA015', 'FL003', 8)

-- 1.	Display CustomerName, StaffName, and Total Transaction (obtained from the total of sales transaction) for each customer whose name contains character 'a' and transaction happened in 2020.

SELECT
    CustomerName,
    StaffName,
    [Total Transaction] = COUNT(st.SalesTransactionID)
FROM SalesTransaction st
JOIN Customer c
ON st.CustomerId = c.CustomerId
JOIN Staff s
ON st.StaffId = s.StaffId
WHERE CustomerName LIKE '%a%'
AND YEAR(SalesTransactionDate) = 2020
GROUP BY CustomerName, StaffName

-- 2.	Display FlokemonName, FlokemonTypeName, and Total Purchased Flokemon (obtained from the sum of purchased flokemon quantity) for FlokemonName length more than 5 and FlokemonTypeName Contain character 'a'.

SELECT
    FlokemonName,
    FlokemonTypeName,
    [Total Purchased Flokemon] = SUM(ptd.PurchaseQuantity)
FROM Flokemon f
JOIN FlokemonType ft
ON f.FlokemonTypeID = ft.FlokemonTypeID
JOIN PurchaseTransactionDetail ptd
ON f.FlokemonID = ptd.FlokemonID
WHERE LEN(FlokemonName) > 5
AND FlokemonTypeName LIKE '%a%'
GROUP BY FlokemonName, FlokemonTypeName

-- 3.	Display FlokemonTypeName, and Average Price (obtained from average flokemon price and start with 'Rp. '), Total Sales Flokemon (obtained from the sum of sold flokemon quantity) for FlokemonTypeName start with character 'p' and have damage more than 1000. Display the data in ascending order.

SELECT
    FlokemonTypeName,
    [Average Price] = CONCAT('Rp. ', CAST(AVG(f.FlokemonPrice) AS VARCHAR)),
    [Total Sales Flokemon] = SUM(std.SalesQuantity)
FROM Flokemon f
JOIN FlokemonType ft
ON f.FlokemonTypeID = ft.FlokemonTypeID
JOIN SalesTransactionDetail std
ON f.FlokemonID = std.FlokemonID
WHERE FlokemonTypeName LIKE 'p%'
AND FlokemonDamage > 1000
GROUP BY FlokemonTypeName
ORDER BY FlokemonTypeName ASC

-- 4.	Display CustomerName, Total Transaction (obtain from the total number of different flokemon bought in one transaction), and Total Flokemon Bought (obtained from total transaction quantity of the sales transaction) for every transaction that happened in October and Total Flokemon quantity more than 10 with each customer whose name contains character 'a'.

SELECT
    CustomerName,
    [Total Transaction] = COUNT(std.SalesTransactionID),
    [Total Flokemon Bought] = SUM(std.SalesQuantity)
FROM SalesTransaction st
JOIN Customer c
ON c.CustomerID = st.CustomerID
JOIN SalesTransactionDetail std
ON st.SalesTransactionID = std.SalesTransactionID
WHERE DATENAME(MONTH, SalesTransactionDate) = 'October'
AND CustomerName LIKE '%a%'
GROUP BY CustomerName
HAVING SUM(std.SalesQuantity) > 10

-- 5.	Display SalesID, CustomerName, StaffName, and Transaction Day (obtained from the day name of transaction date) for each transaction made by staff that has above average salary (obtained from average salary of all staffs) and was done in February. (alias subquery)

SELECT
    [SalesID] = SalesTransactionID,
    CustomerName,
    StaffName,
    [Transaction Day] = DATENAME(WEEKDAY, SalesTransactionDate)
FROM SalesTransaction st
JOIN Customer c
ON st.CustomerID = c.CustomerID
JOIN Staff s
ON st.StaffID = s.StaffID,
(
    SELECT
        [Average] = AVG(s2.StaffSalary)
    FROM Staff s2
) AsAvgSalary
WHERE StaffSalary > AsAvgSalary.Average
AND DATENAME(MONTH, SalesTransactionDate) = 'February'

-- 6.	Display StaffName (obtained from upper case format of StaffName), FlokemonName, Transaction Year (obtained from the year of transaction date) for each transaction that has a transaction quantity more than the average of all the transaction quantity in 2018 and staff whose name contain character 's'. (alias subquery)

SELECT
    [StaffName] = UPPER(s.StaffName),
    f.FlokemonName,
    [Transaction Year] = YEAR(pt.PurchaseTransactionDate)
FROM Staff s
JOIN PurchaseTransaction pt
ON pt.StaffID = s.StaffID
JOIN PurchaseTransactionDetail ptd
ON pt.PurchaseTransactionID = ptd.PurchaseTransactionID
JOIN Flokemon f
ON ptd.FlokemonID = f.FlokemonID,
(
    SELECT
        [Average] = AVG(ptd2.PurchaseQuantity)
    FROM PurchaseTransactionDetail ptd2
) Asaveragequantity
WHERE ptd.PurchaseQuantity > Asaveragequantity.Average
AND s.StaffName LIKE '%s%'
AND YEAR(pt.PurchaseTransactionDate) = 2018

-- 7.	Display Transaction Date and Max Flokemon Sales (obtained from max quantity of flokemon sales transaction and ends with ' Flokemon') for each Flokemon that are sold between July and December in 2020 by staff name contain character 's'. (alias subquery)

SELECT
    [Transaction Date] = SalesTransactionDate,
    [Max Flokemon Sales] = CAST(MAX(std.SalesQuantity) AS VARCHAR) + ' Flokemon'
FROM SalesTransactionDetail std
JOIN SalesTransaction st
ON std.SalesTransactionID = st.SalesTransactionID
JOIN Staff s
ON st.StaffID = s.StaffID,
(
    SELECT
       [StaffName] = StaffName
    FROM Staff s2
    WHERE StaffName LIKE '%s%'
) AsStaffNameContainS
WHERE s.StaffName = AsStaffNameContainS.StaffName
AND DATEPART(QUARTER, SalesTransactionDate) BETWEEN 3 AND 4
AND YEAR(SalesTransactionDate) = 2020
GROUP BY SalesTransactionDate

-- 8.	Display Transaction Date and Max Flokemon Purchased (obtained from max quantity of flokemon purchase transaction and ends with ' Flokemon') for each Flokemon that are bought between January and October in 2018 by staff name contain character 'o'. (alias subquery)

SELECT
    [Transaction Date] = PurchaseTransactionDate,
    [Max Flokemon Purchased] = CAST(MAX(ptd.PurchaseQuantity) AS VARCHAR) + ' Flokemon'
FROM PurchaseTransaction pt
JOIN PurchaseTransactionDetail ptd
ON pt.PurchaseTransactionID = ptd.PurchaseTransactionID
JOIN Staff s
ON pt.StaffID = s.StaffID,
(
    SELECT
        [StaffName] = StaffName
    FROM Staff s2
    WHERE StaffName LIKE '%o%'
) AsStaffNameContainO
WHERE s.StaffName = AsStaffNameContainO.StaffName
AND MONTH(PurchaseTransactionDate) BETWEEN 1 AND 10
AND YEAR(PurchaseTransactionDate) = 2018
GROUP BY PurchaseTransactionDate

-- 9.	Create a view named PurchaseView that display SupplierName, Supplier Phone (obtained by replacing 0 in front of the phone number with '+62'), Total Transactions (obtained from total number of different flokemon bought in one transaction), Total Flokemon Bought (obtained from total of transaction quantity in Purchase transaction), and for each Supplier that has made between 1 and 5 transactions and Supplier name length less than 15.

CREATE VIEW PurchaseView
AS
SELECT
    SupplierName,
    [Supplier Phone] = REPLACE(SupplierPhoneNumber, '0', '+62'),
    [Total Transactions] = COUNT(pt.PurchaseTransactionID),
    [Total Flokemon Bought] = SUM(PurchaseQuantity)
FROM PurchaseTransaction pt
JOIN Supplier s
ON pt.SupplierID = s.SupplierID
JOIN PurchaseTransactionDetail ptd
ON pt.PurchaseTransactionID = ptd.PurchaseTransactionID
WHERE LEN(SupplierName) < 15
GROUP BY SupplierName, REPLACE(SupplierPhoneNumber, '0', '+62')
HAVING COUNT(pt.PurchaseTransactionID) BETWEEN 1 AND 5

-- 10.	Create a view named StaffSalesView that display StaffName, Total Transactions (obtained from total number of different flokemon sold in one transaction), Total Flokemon Sold (obtained from total of transaction quantity in Sales transaction), and for each staff sell more than 10 Flokemon, StaffName length less than 15. 

CREATE VIEW StaffSalesView
AS
SELECT
    s.StaffName,
    [Total Transaction] = COUNT(std.SalesTransactionID),
	[Total Flokemon Sold] = SUM(std.SalesQuantity)
FROM SalesTransactionDetail std
JOIN SalesTransaction st
ON std.SalesTransactionID = st.SalesTransactionID
JOIN Staff s
ON st.StaffID = s.StaffID
WHERE LEN(s.StaffName) < 15
GROUP BY s.StaffName
HAVING SUM(std.SalesQuantity) > 10
